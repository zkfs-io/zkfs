<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ZKFS Blog</title>
        <link>https://zkfs.io/blog</link>
        <description>ZKFS Blog</description>
        <lastBuildDate>Mon, 06 Mar 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Introducing ZKFS, Mina's native data availability layer]]></title>
            <link>https://zkfs.io/blog/introducing-zkfs-mina-data-availability-layer</link>
            <guid>https://zkfs.io/blog/introducing-zkfs-mina-data-availability-layer</guid>
            <pubDate>Mon, 06 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Introducing ZKFS _(Zero-Knowledge File System)_ - a data availability layer designed to reduce blockchain storage requirements while still allowing for complex business logic.]]></description>
            <content:encoded><![CDATA[<p><strong>Introducing ZKFS <em>(Zero-Knowledge File System)</em> - a data availability layer designed to reduce blockchain storage requirements while still allowing for complex business logic. </strong></p><p>Unlike traditional blockchain designs, MINA's zero-knowledge approach enables developers to store <sup id="fnref-1-912e90"><a href="#fn-1-912e90" class="footnote-ref">1</a></sup>large data structures indirectly (through state hash commitments) without adding unnecessary bulk to the network. More importantly, it shifts the responsibilities of executing smart-contracts to the client side, together with delegating the data storage requirements outside of the MINA chain itself.</p><p><a href="https://zkfs.io" target="_blank" rel="noopener noreferrer">You can try ZKFS out for yourself on our online playground or locally.</a></p><p>Our solution offers a suite of smart-contract libraries, networking utilities, and data consensus tools that allow for the seamless development of smart contracts capable of storing arbitrarily large data structures.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-do-we-need-a-data-availability-layer-at-all">Why do we need a data availability layer at all?<a href="#why-do-we-need-a-data-availability-layer-at-all" class="hash-link" aria-label="Direct link to Why do we need a data availability layer at all?" title="Direct link to Why do we need a data availability layer at all?">​</a></h2><p>In the case of "traditional" smart-contract blockchain designs like EVM/Ethereum or Tezos, the business logic of each transaction and its smart contracts are validated directly by the chain itself. To include a smart contract transaction in a block, <strong>the block producer and all other nodes must have access to all the data related to the contract and the other "chain data"</strong> as well. This results in the blockchain growing in size, and <a href="https://ethereum.org/en/developers/docs/nodes-and-clients/archive-nodes/#hardware" target="_blank" rel="noopener noreferrer">for instance, an Ethereum archive node requires 3-12TB of storage space</a> to run.</p><p><strong>Thanks to the zero-knowledge nature of MINA and the well-designed smart-contract platform, operating a MINA node is expected to be less storage-intensive.</strong> This is especially true when scaling the amount of storage space used to accommodate the deployment of various applications/smart-contracts on the MINA platform.</p><p>The MINA network imposes a limitation on the amount of storage space that can be taken per account, allowing only 8 Fields. As a point of reference, a simple public key can be serialized into two Fields, meaning that each account or smart-contract can only store 4 public keys in its on-chain storage. While this restriction may benefit the network and its node operators by maintaining lower storage requirements compared to other blockchains, it presents a challenge for smart-contract development, as complex business logic often requires the storage of arbitrarily large data structures.</p><p><strong>To address this limitation, we have started working on ZKFS</strong> - a solution that provides an intuitive approach for developing smart contracts capable of storing arbitrarily large data structures. ZKFS offers a seamless developer experience, featuring a suite of (snarkyjs-based) libraries, zk-security guarantees, and networking utilities (ZKFS nodes) such as distributed data storage and replication, as well as data validation through built-in consensus mechanisms.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="state-of-zkfs-development-today">State of ZKFS development today<a href="#state-of-zkfs-development-today" class="hash-link" aria-label="Direct link to State of ZKFS development today" title="Direct link to State of ZKFS development today">​</a></h2><p>In February we have begun working on a grant by the Mina Foundation to kickstart the development of ZKFS. This proposal is the next natural step in our journey to make ZKFS the go-to storage solution for MINA's smart-contract developers.</p><p>Based on our <a href="https://stove-labs.notion.site/Off-chain-Storage-74a69774288d4b3b80e861a8f10ff73a" target="_blank" rel="noopener noreferrer">initial ideation</a>, we have originally split up the existing ZKFS roadmap into 4 milestones, the first two overall milestones are a part of the existing grant and are mostly done and available today.</p><p>First two milestones are pending further review by MF, after the target completion date by the end of March 2023.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="architecture-and-fundamental-principles">Architecture and fundamental principles<a href="#architecture-and-fundamental-principles" class="hash-link" aria-label="Direct link to Architecture and fundamental principles" title="Direct link to Architecture and fundamental principles">​</a></h2><p>At it's core ZKFS is designed to be feature-permissive, with replacable components/adapters as per the <em>'substitution principle'</em>. You can think of ZKFS as a shell, designed to run concrete implementations of its core components.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Don't like reading tables? Skip ahead to <a href="#separation-of-responsibilities-and-conceptual-flow">the flow diagram</a>.</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="interchangable-component-overview">Interchangable component overview<a href="#interchangable-component-overview" class="hash-link" aria-label="Direct link to Interchangable component overview" title="Direct link to Interchangable component overview">​</a></h3><table><thead><tr><th align="left">Component</th><th align="left">Responsibilities</th><th align="left">Available Implementations</th></tr></thead><tbody><tr><td align="left"><strong>Node and Light Client</strong></td><td align="left">—</td><td align="left"><a href="https://github.com/zkfs-io/zkfs/tree/feat/zkfs-node/packages/node" target="_blank" rel="noopener noreferrer">@zkfs/node</a></td></tr><tr><td align="left">Storage</td><td align="left">Storing, replicating and validating incoming data through consensus</td><td align="left"><a href="https://github.com/zkfs-io/zkfs/tree/feat/zkfs-node/packages/storage-adapters/orbit-db" target="_blank" rel="noopener noreferrer">@zkfs/storage-orbit-db</a></td></tr><tr><td align="left">Consensus</td><td align="left">Validating individual data writes per the desired consensus logic</td><td align="left">[WIP]<!-- --> On-chain root hash consensus</td></tr><tr><td align="left">Services</td><td align="left">Extending the features available in the ZKFS Node, currently used to provide access to data for light clients</td><td align="left"><a href="https://github.com/zkfs-io/zkfs/tree/feat/zkfs-node/packages/services/orbit-db-data-pubsub" target="_blank" rel="noopener noreferrer">@zkfs/orbit-db-data-pubsub</a></td></tr><tr><td align="left">Event parser (working name)</td><td align="left">Observing and processing write requests made by the contracts</td><td align="left">[WIP]<!-- --> Mina node transaction event parser</td></tr><tr><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><strong>Contract tooling</strong></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">Contract API</td><td align="left">In-contract utilities with full SnarkyJS compatibility, verifying data retrieved from nodes/light clients, emitting data to be processed by nodes</td><td align="left"><a href="https://www.npmjs.com/package/@zkfs/contract-api" target="_blank" rel="noopener noreferrer">@zkfs/contract-api</a></td></tr><tr><td align="left">Virtual storage</td><td align="left">Virtual/rolling storage used to process in-memory data writes, required to ensure data correctness across multiple data writes</td><td align="left"><a href="https://www.npmjs.com/package/@zkfs/virtual-storage" target="_blank" rel="noopener noreferrer">@zkfs/virtual-storage</a></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="flow-diagram--separation-of-responsibilities">Flow diagram &amp; Separation of responsibilities<a href="#flow-diagram--separation-of-responsibilities" class="hash-link" aria-label="Direct link to Flow diagram &amp; Separation of responsibilities" title="Direct link to Flow diagram &amp; Separation of responsibilities">​</a></h3><iframe width="100%" height="450" src="https://www.figma.com/embed?embed_host=share&amp;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FyuquvCH4kOGTgh0zPXrHEh%2FUntitled%3Fnode-id%3D0%253A1%26t%3DuvoP6lTxmpk1uaC8-1"></iframe><h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-zkfs-in-smart-contracts">Using ZKFS in smart contracts<a href="#using-zkfs-in-smart-contracts" class="hash-link" aria-label="Direct link to Using ZKFS in smart contracts" title="Direct link to Using ZKFS in smart contracts">​</a></h2><p>Earlier we have described what components make ZKFS possible, now we'll dive into how exactly can a Mina smart contract <del>trust</del> verify the data it receives from ZKFS.</p><p>Contract API comes with a set of utilities that make consuming off-chain state in a smart contract a breeze. First of all, it lets you define the shape and structure of your off-chain state,
in a fashion very similiar to on-chain state. This ensures a low learning curve for existing SnarkyJS developers.</p><div class="theme-admonition theme-admonition-warning alert alert--danger admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_S0QG"><p>Having trouble running any of the code snippets below? We keep our reference examples up to date, you can <a href="https://stackblitz.com/github/zkfs-io/zkfs?file=packages%2Fexamples%2Ftest%2Fcounter.test.ts,packages%2Fexamples%2Ftest%2Fcounter.ts&amp;hideExplorer=1&amp;hideNavigation=1&amp;theme=dark&amp;view=editor" target="_blank" rel="noopener noreferrer">try them in our online playground</a>.</p><p>Examples in this blog post are valid under the following package releases:</p><ul><li><code>@zkfs/contract-api@0.1.9-develop.151</code></li></ul></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="counter-example">Counter example<a href="#counter-example" class="hash-link" aria-label="Direct link to Counter example" title="Direct link to Counter example">​</a></h3><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">counter.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  OffchainStateContract</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  offchainState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  OffchainState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@zkfs/contract-api'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> UInt64 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'snarkyjs'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Counter</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name">OffchainStateContract</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// badum-tss, we now have access to off-chain state</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">offchainState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> count </span><span class="token operator">=</span><span class="token plain"> OffchainState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token generic-function function" style="color:rgb(80, 250, 123)">fromRoot</span><span class="token generic-function generic class-name operator">&lt;</span><span class="token generic-function generic class-name">UInt64</span><span class="token generic-function generic class-name operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">UInt64</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// runs every time this contract is deployed</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">super</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// initialise our 'count' state to 0</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">set</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">UInt64</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">from</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// anyone can call this method to increment the counter</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token decorator at operator">@</span><span class="token decorator function" style="color:rgb(80, 250, 123)">method</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">update</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// obtain 'count' from the off-chain state</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> currentCount </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// increment the counter</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> newCount </span><span class="token operator">=</span><span class="token plain"> currentCount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">add</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// set the new count off-chain state</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">set</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">newCount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><br><h3 class="anchor anchorWithStickyNavbar_LWe7" id="transactions-with-off-chain-state">Transactions with off-chain state<a href="#transactions-with-off-chain-state" class="hash-link" aria-label="Direct link to Transactions with off-chain state" title="Direct link to Transactions with off-chain state">​</a></h3><p><strong>Is that it?</strong> Well not exactly... you still have to actually go and fetch the off-chain state required for your contract to run. This can be done by wrapping your contract transaction into <code>contractApi.transaction(...)</code>, instead of using <code>Mina.transaction(...)</code> directly.</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">counter.test.ts</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token function" style="color:rgb(80, 250, 123)">it</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'should update the counter'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> senderKey </span><span class="token operator">=</span><span class="token plain"> PrivateKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> senderAccount </span><span class="token operator">=</span><span class="token plain"> senderKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">toPublicKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// setup Contract API</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> contractApi </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">ContractApi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// instance of the Counter contract</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> zkApp </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Counter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Contract API automatically deducts with off-chain keys to fetch</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> tx </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> contractApi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">transaction</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">zkApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> senderAccount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    zkApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">update</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> tx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">prove</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> tx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">sign</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">senderKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#F8F8F2"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><br><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>Please keep in mind that the example above works for simple contracts such as the Counter. If your contract relies
on more complext data structures - e.g. if you use our nested map API, then you might be required to specify what data to fetch
for each contract method manually.</p><p>This isn't the target solution, there's a way to determine what keys and merkle maps need to be pre-fetched automatically, but its always
up to the developer to consider the performance trade offs of both approaches.</p><p><strong>We'll ship automated key/map pre-fetching in the coming releases of the Contract API.</strong></p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cryptographic-guarantees-and-working-principles">Cryptographic guarantees and working principles<a href="#cryptographic-guarantees-and-working-principles" class="hash-link" aria-label="Direct link to Cryptographic guarantees and working principles" title="Direct link to Cryptographic guarantees and working principles">​</a></h3><p>Contract API is cool, but what actually happens when you <code>.get()</code> or <code>.set()</code> state? Let's take a look at how Count's off-chain state data ends up being represented in the ZKFS network &amp; tooling.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="contract-root-map-and-offchainstatecontract">Contract root map and <code>OffchainStateContract</code><a href="#contract-root-map-and-offchainstatecontract" class="hash-link" aria-label="Direct link to contract-root-map-and-offchainstatecontract" title="Direct link to contract-root-map-and-offchainstatecontract">​</a></h4><p>Each contract has a single corresponding <code>root map</code>, which is an instance of SnarkyJS's <code>MerkleMap</code>. By extending the <code>OffchainStateContract</code> in your <code>Counter</code>, you gain access to what Contract API has to offer. Firstly this means defining an on-chain <code>@state()</code> for the root map's <code>offchainStateRootHash</code>. This piece of on-chain state is the root has of your off-chain state root map. No other on-chain data is required for your contract to be compatible with ZKFS.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="defining-off-chain-state">Defining off-chain state<a href="#defining-off-chain-state" class="hash-link" aria-label="Direct link to Defining off-chain state" title="Direct link to Defining off-chain state">​</a></h4><p>Our <code>count</code> is a piece of off-chain state that resides directly on the root map itself. We know it is of type <code>UInt64</code> which is important for both receving data inside a contract, and for emitting new data through events. Data that can be stored in merkle maps, including the root map, must be of type <code>FlexibleProvablePure&lt;T&gt;</code>, which covers all SnarkyJS primitives such as <code>UInt64</code> or <code>Struct({...})</code>.</p><p>In this case the property name <code>count</code> is used as a key in the root map. Initially the value is empty (<code>Field(0)</code> by default). We'll explain how data is written below.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="deploying-contracts--setting-data">Deploying contracts &amp; setting data<a href="#deploying-contracts--setting-data" class="hash-link" aria-label="Direct link to Deploying contracts &amp; setting data" title="Direct link to Deploying contracts &amp; setting data">​</a></h4><p>The Counter contract we've seen earlier has an <code>init()</code> method, which is a built-in SnarkyJS feature, that allows us to setup our on-chain state at the time of deployment. We can use the same principles to set up our off-chain state as well.</p><p>In order to set the initial value of our <code>count</code> off-chain state, we have to use the <code>.set(value)</code> method, available on <code>OffchainState</code>. Once you call <code>.set(...)</code>, the provided value is set in the <code>@zkfs/virtual-storage</code>, which ensures you can get/set values multiple times while executing your smart contract method. More importantly an event containing all the relevant information about your data write request is emitted. These events contain the <code>path</code> to your value, and the value itself. This helps us identify in which merkle map you want to update the data.</p><p>One of the most important concepts that ensure an eventual 100% data availability, is that the emitting of events is part of the proof/circuit itself. This means you cannot calculate a valid proof, without providing the necessary events with the required data. There are some shortcomings due to limits of data you can include in events, which we've brought up <a href="https://github.com/o1-labs/snarkyjs/issues/757#issue-1602789987" target="_blank" rel="noopener noreferrer">here</a>.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="reading-data-in-contract-methods">Reading data in contract methods<a href="#reading-data-in-contract-methods" class="hash-link" aria-label="Direct link to Reading data in contract methods" title="Direct link to Reading data in contract methods">​</a></h4><p>We've already covered how you can define and set off-chain state, the next logical step is to retrieve it within our contract. You can access off-chain state by calling <code>.get()</code> on your defined state. In our case that would be <code>this.count.get()</code>.</p><blockquote><p>As of current technical preview, the ContractAPI operates in an isolated test mode, which means that the data is only get/set from the virtual storage. Upcoming release of the <code>@zkfs/node</code> will provide a full lifecycle experience as described in our flow diagrams above.</p></blockquote><p>For the sake of a simplified explanation, we assume the data required for the execution of our smart-contract method has already been pre-fetched and stored in the virtual storage.</p><p>Once you call <code>.get()</code>, the Contract API will bring in a <code>MerkleMapWitness</code> for your specific map key (in our case <code>count</code>), and also the value stored under our key (e.g. <code>0</code>, or <code>1</code>, or whatever the current state is). As a next step, the Contract API uses the received value and merkle witness to calculate a <strong>computed root hash</strong>, if the computed root hash matches your on-chain root-hash (<code>offchainStateRootHash</code>) then the data received is considered valid.</p><p>This was a very simplified explanation of the data correctness verification, there's a bit more to it - like making sure the on-chain root hash you're asserting against is actually the correct one. You can learn more about SnarkyJS/Mina transaction pre-conditions in the <a href="https://docs.minaprotocol.com/zkapps/how-to-write-a-zkapp#reading-state" target="_blank" rel="noopener noreferrer">SnarkyJS docs</a>.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>These are the same principles as enforced by <code>@zkfs/node</code>'s consensus algorithm.</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="nested-map-api">Nested map API<a href="#nested-map-api" class="hash-link" aria-label="Direct link to Nested map API" title="Direct link to Nested map API">​</a></h3><p>We keep mentioning nested map API as it is one of the most powerful features of ZKFS's Contract API. You can find an example contract that uses it <a href="https://github.com/zkfs-io/zkfs/blob/develop/packages/examples/test/piggyBank.ts" target="_blank" rel="noopener noreferrer">here</a>. The nested maps work by storing the nested map's root hash, as a value in its parent map under a specific key (map's name). This pattern allows you to store nested and complex data structures recursively, while adhering to the same cryptographic guarantees going upwards in the parent tree.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-can-you-expect-in-the-near-future">What can you expect in the near future?<a href="#what-can-you-expect-in-the-near-future" class="hash-link" aria-label="Direct link to What can you expect in the near future?" title="Direct link to What can you expect in the near future?">​</a></h2><p>If you'd like to explore and use ZKFS's toolkit further, please take a look at our existing <a href="https://github.com/zkfs-io/zkfs/tree/develop/packages/examples" target="_blank" rel="noopener noreferrer">examples</a>, or try them in our <a href="https://stackblitz.com/github/zkfs-io/zkfs?file=packages%2Fexamples%2Ftest%2Fcounter.test.ts,packages%2Fexamples%2Ftest%2Fcounter.ts&amp;hideExplorer=1&amp;hideNavigation=1&amp;theme=dark&amp;view=editor" target="_blank" rel="noopener noreferrer">playground</a>.</p><p>We're also actively working on delivering all the appropriate documentation needed for you to start using ZKFS to its full potential. One of the key stepping stones in the future of ZKFS, is our <a href="https://zkignite.minaprotocol.com/zkignite/dev4dev-track-1/phase1-draftproposals/suggestion/346" target="_blank" rel="noopener noreferrer">zkIgnite funding proposal</a>.</p><p><strong>If you'd like to voice your support towards ZKFS, you can do so on:</strong></p><ul><li><a href="https://zkignite.minaprotocol.com/zkignite/dev4dev-track-1/phase1-draftproposals/suggestion/346" target="_blank" rel="noopener noreferrer">Our zkIgnite funding proposal</a></li><li><a href="https://twitter.com/zkfs_io" target="_blank" rel="noopener noreferrer">Our twitter</a></li><li><a href="https://discord.gg/pdKS7px98G" target="_blank" rel="noopener noreferrer">Mina discord</a></li></ul><p><strong>Thank you for reading and see you in the next blog post.</strong></p><div class="footnotes"><hr><ol><li id="fn-1-912e90">As long as someone is willing to pay for the storage, and someone is willing to store it.<!-- -->_<a href="#fnref-1-912e90" class="footnote-backref">↩</a></li></ol></div>]]></content:encoded>
        </item>
    </channel>
</rss>